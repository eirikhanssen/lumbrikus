<?xml version="1.0" encoding="UTF-8"?>
<!--<?xml-stylesheet type="text/css" href="../../css/interactive-svg.css" ?>   -->
<svg id="svg"
    width="100%"
    height="100%"
    viewBox="-959.5 -539.5 1920 1080"
    preserveAspectRatio="xMidYMid meet"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    version="2.0">
    <title>Interaction zones</title>
    <style type="text/css">

            .grid {
                fill:none;
                stroke-width: 1px;
                stroke: rgba(131, 198, 252, 0.8);
            }

            #controls circle {
                fill: rgba(255,255,255,0.25);
                fill:transparent;
                stroke: rgba(131, 198, 252, 1);
                stroke-width: .5em;
                paint-order: stroke;
            }

            #controls .origin {
                fill:red;
                stroke:red;
                stroke-width: 2px;
            }

            #controls text {
                text-anchor: middle;
                font-family: sans-serif;
                font-size: 2em;
                font-weight:bold;
            }

            #controls rect {
                fill:white;
                stroke: rgba(131, 198, 252, 1);
                stroke-width: .5em;
            }
            #controls .show rect {
                fill:rgba(255, 248, 142, 1);
            }

            .control-group .desc {
                opacity: 0;
            }

            .control-group .origin {
                opacity: .5;
            }

            .control-group:hover .desc,
            .control-group.show .desc,
            .control-group:hover .origin,
            .control-group.show .origin {
                opacity:1;
            }

            #controls .control-group:hover .control,
            #controls .control-group.show .control {
               fill: rgba(131, 198, 252, 1);
            }
        </style>
    <defs>
        
    </defs>

    <g id="grid">
        <line class="grid" x1="0" x2="0" y1="-10000" y2="10000"/>
        <line class="grid" y1="0" y2="0" x1="-10000" x2="10000"/>
    </g>

    <g id="controls">
    </g>
  
    <script type="text/javascript" xlink:href="../../js/lib/snap.svg-min.js"></script>

    <script>
        var PI = Math.Pi;
        // cp = control points

        /*
            x: x-posisjon
            y: y-posisjon
            txt: forklaring
            d: avstand fra tegning til kontroll-sirkel
            t: time (klokka i heltall eller desimaltall - retning kontroll-sirkel skal flyttes)
        */

        var cp = [
        {x:400, y:400, txt: "meitemarken", d:200, t:11},
        {x:0, y:0, txt: "kl 1", d:250, t:1},
        {x:0, y:0, txt: "kl 2", d:250, t:2},
        {x:0, y:0, txt: "kl 3", d:250, t:3},
        {x:0, y:0, txt: "kl 4", d:250, t:4},
        {x:0, y:0, txt: "kl 5", d:250, t:5},
        {x:0, y:0, txt: "kl 6", d:250, t:6},
        {x:0, y:0, txt: "kl 7", d:250, t:7},
        {x:0, y:0, txt: "kl 8", d:250, t:8},
        {x:0, y:0, txt: "kl 9", d:250, t:9},
        {x:0, y:0, txt: "kl 10", d:250, t:10},
        {x:0, y:0, txt: "kl 11 - når den trykkes på burde den legges inn sist i gruppen sin, slik at den kommer øverst!", d:250, t:11},
        {x:0, y:0, txt: ":hover og .show > kanskje skjul selve control_circle. control circle burde ha transparent bg", d:400, t:12},
        {x:0, y:0, txt: "kl 13", d:400, t:13},
        {x:0, y:0, txt: "kl 14 - sett distanse (px) og klokka (retning)", d:400, t:14},
        {x:0, y:0, txt: "kl 15", d:400, t:15},
        {x:0, y:0, txt: "kl 16 - control_circle blir flyttet den veien", d:400, t:16},
        {x:0, y:0, txt: "kl 18 - men det blir en rød prikk på utganspunktet", d:400, t:18},
        {x:0, y:0, txt: "kl 20 - som kan være midt i objektet i tegningen", d:400, t:20},

        ];
        /*
        var cp = [
        {x:400, y:400, txt: "meitemarken", d:200, t:11}
        ];*/
        var control_circle_radius = 40;
        var origin_circle_radius = 10;
        var s = Snap("#controls");
        var svg = document.querySelector("#svg");
        var svgNS = svg.namespaceURI;
        var pad = 10;

        function get_x_offset(dist, time) {
            var x_multiplier = Math.cos(Math.PI * (time/3 - 1) / 2);
            return Math.round(dist*x_multiplier);
        }

        function get_y_offset(dist, time) {
            var y_multiplier = Math.sin(Math.PI * (time/3 - 1) / 2);
            return Math.round(dist*y_multiplier);
        }

        for (let p of cp) {
            //var offset_y = -1 * p.d * Math.sin((((p.t*4)-1)/2)*PI);
            //var offset_x = p.d * Math.cos((((p.t*4)-1)/2)*PI);
            //console.log(offset_x + " ," + offset_y);
            
            var offset_x = get_x_offset(p.d, p.t);
            var offset_y = get_y_offset(p.d, p.t);

            console.log(offset_x + " , " + offset_y);

            var cg = s.g();
            //cg.attr({transform: "translate(offset_x, offset_y)"});
            cg.attr({transform: "translate(" + offset_x + "," + offset_y + ")"});
            cg.click(function(e){
                var target = e.target;
                //target.toggleClass("show");
                console.log(target);
                this.toggleClass("show");
            });
            cg.attr({class: "control-group"});
            
            var control_circle = cg.circle(p.x, p.y, control_circle_radius);
            control_circle.attr({class: "control"});
            
            var textgroup = cg.g();
            textgroup.attr({class: "desc"});
            var txt_el = textgroup.text(p.x, p.y);
            var tspan_el = document.createElementNS(svgNS,'tspan');
            tspan_el.setAttribute('dy', '.35em');
            var t = document.createTextNode(p.txt);
            tspan_el.appendChild(t);
            txt_el.append(tspan_el);
            var text_el_bbox = txt_el.getBBox();
            
            var text_bg = cg.rect(text_el_bbox.x - 2*pad, text_el_bbox.y - pad, text_el_bbox.w + 4*pad, text_el_bbox.h + 2*pad);
            text_bg.attr({rx:3*pad, ry:3*pad});
            txt_el.before(text_bg);

            var origin_group = cg.g();
            control_circle.before(origin_group);
            origin_group.attr({class: "origin"});

            var origin_circle = origin_group.circle(p.x-offset_x,p.y-offset_y,origin_circle_radius);
            origin_circle.attr({class:"origin"});

            var origin_line = origin_group.line(p.x - get_x_offset(control_circle_radius, p.t), p.y - get_y_offset(control_circle_radius, p.t), p.x - offset_x + get_x_offset(origin_circle_radius, p.t), p.y - offset_y + get_y_offset(origin_circle_radius, p.t));
            origin_line.attr({class: "origin"});
        }
    </script>

</svg>